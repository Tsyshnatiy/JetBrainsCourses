package watermark

import java.awt.Color
import java.awt.Transparency
import java.awt.image.BufferedImage
import java.io.File
import java.lang.IllegalArgumentException
import javax.imageio.ImageIO
import kotlin.system.exitProcess

fun getImage(watermark: Boolean = false): BufferedImage {
    println("Input the${if (watermark) " watermark" else ""} image filename:")
    val pathname = readln()
    val file = File(pathname)
    if (!file.exists()) {
        println("The file $pathname doesn't exist.")
        exitProcess(1)
    }

    val image = ImageIO.read(file)
    if (!watermark && image.colorModel.numComponents != 3) {
        println("The number of image color components isn't 3.")
        exitProcess(1)
    } else if (watermark && image.colorModel.numComponents < 3) {
        println("The number of watermark color components isn't 3.")
        exitProcess(1)
    } else if (image.colorModel.pixelSize != 24 && image.colorModel.pixelSize != 32) {
        println("The ${if (watermark) "watermark" else "image"} isn't 24 or 32-bit.")
        exitProcess(1)
    }

    return image
}

fun hasTransparency(image: BufferedImage): Boolean = image.transparency == Transparency.TRANSLUCENT

fun checkIfUseWatermarkTransparency(): Boolean {
    println("Do you want to use the watermark's Alpha channel?")
    val answer = readln()

    return answer.lowercase() == "yes"
}

fun askForTransparencyColor(): Color? {
    println("Do you want to set a transparency color?")
    val useTransparencyColor = readln().lowercase() == "yes"

    if (!useTransparencyColor) {
        return null
    }
    try {
        println("Input a transparency color ([Red] [Green] [Blue]):")
        val colors = readln().split(" ").map { it.toInt() }
        assert(colors.size == 3)

        return Color(colors[0], colors[1], colors[2])
    } catch (e: Throwable) {
        println("The transparency color input is invalid.")
        exitProcess(1)
    }
}

fun areImageSizesOk(image: BufferedImage, watermark: BufferedImage): Boolean =
    watermark.height <= image.height && watermark.width <= image.width

fun getTransparencyPercentage(): Int {
    println("Input the watermark transparency percentage (Integer 0-100):")
    val percentage = try {
        readln().toInt()
    } catch (e: NumberFormatException) {
        println("The transparency percentage isn't an integer number.")
        exitProcess(1)
    }

    if (!(0..100).contains(percentage)) {
        println("The transparency percentage is out of range.")
        exitProcess(1)
    }

    return percentage
}

fun getOutputFileName(): String {
    println("Input the output image filename (jpg or png extension):")

    val filename = readln()
    if (!filename.endsWith("jpg") && !filename.endsWith("png")) {
        println("The output file extension isn't \"jpg\" or \"png\".")
        exitProcess(1)
    }

    return filename
}

class Position(xx: Int, yy: Int) {
    val x = xx
    val y = yy
}

enum class PositionMethod {
    SINGLE,
    GRID
}

fun isOutOfBounds(pos: Position, image: BufferedImage): Boolean {
    return pos.x < 0 || pos.y < 0
            || pos.x >= image.width
            || pos.y >= image.height
}

fun putWatermarkAt(
    image: BufferedImage,
    watermark: BufferedImage,
    target: BufferedImage,
    percentage: Int,
    useWaterMarkTransparency: Boolean,
    transparencyColor: Color?,
    position: Position) {
    for (w in 0 until watermark.width) {
        for (h in 0 until watermark.height) {
            val x = position.x + w
            val y = position.y + h
            if (isOutOfBounds(Position(x, y), target)) {
                continue
            }

            val imageColor = Color(image.getRGB(x, y))
            val watermarkColor = Color(watermark.getRGB(w, h), useWaterMarkTransparency)

            if (useWaterMarkTransparency && watermarkColor.alpha == 0) {
                target.setRGB(x, y, imageColor.rgb)
                continue
            }

            if (transparencyColor?.rgb == watermarkColor.rgb) {
                target.setRGB(x, y, imageColor.rgb)
                continue
            }

            val newColor = Color(
                mixColor(percentage, watermarkColor.red, imageColor.red),
                mixColor(percentage, watermarkColor.green, imageColor.green),
                mixColor(percentage, watermarkColor.blue, imageColor.blue)
            )

            target.setRGB(x, y, newColor.rgb)
        }
    }
}

fun putWatermarkGrid(image: BufferedImage,
                     watermark: BufferedImage,
                     target: BufferedImage,
                     percentage: Int,
                     useWaterMarkTransparency: Boolean,
                     transparencyColor: Color?) {
    val countWatermarksX = image.width / watermark.width
    val countWatermarksY = image.height / watermark.height

    for (i in 0 until countWatermarksX + 1) {
        for (j in 0 until countWatermarksY + 1) {
            val x = i * watermark.width
            val y = j * watermark.height
            val pos = Position(x, y)
            if (isOutOfBounds(pos, target)) {
                continue
            }

            putWatermarkAt(image, watermark, target, percentage, useWaterMarkTransparency, transparencyColor, pos)
        }
    }
}

fun putWatermark(image: BufferedImage,
                 watermark: BufferedImage,
                 percentage: Int,
                 useWaterMarkTransparency: Boolean,
                 transparencyColor: Color?,
                 position: Position?,
                 positionMethod: PositionMethod): BufferedImage {
    val result = BufferedImage(image.width, image.height, BufferedImage.TYPE_INT_RGB)
    for (w in 0 until result.width) {
        for (h in 0 until result.height) {
            val imageColor = Color(image.getRGB(w, h))
            result.setRGB(w, h, imageColor.rgb)
        }
    }

    if (positionMethod == PositionMethod.SINGLE) {
        if (position == null) {
            throw IllegalArgumentException("Single position method should have position")
        }
        putWatermarkAt(image, watermark, result, percentage, useWaterMarkTransparency, transparencyColor, position)
        return result
    }

    putWatermarkGrid(image, watermark, result, percentage, useWaterMarkTransparency, transparencyColor)

    return result
}

fun mixColor(weight: Int, watermark: Int, image: Int) =
    (weight * watermark + (100 - weight) * image) / 100

fun getPositionMethod() : PositionMethod {
    println("Choose the position method (single, grid):")
    return when(readln().lowercase()) {
        "single" -> PositionMethod.SINGLE
        "grid" -> PositionMethod.GRID
        else -> {
            println("The position method input is invalid.")
            exitProcess(1)
        }
    }
}

fun getWatermarkPosition(image: BufferedImage, watermark: BufferedImage) : Position {
    val diffX = image.width - watermark.width
    val diffY = image.height - watermark.height
    println("Input the watermark position ([x 0-$diffX] [y 0-$diffY]):")
    val positionStrings = readln().split(" ")
    if (positionStrings.size != 2) {
        println("The position input is invalid.")
        exitProcess(1)
    }

    val x = positionStrings[0].toIntOrNull()
    val y = positionStrings[1].toIntOrNull()
    if (x == null || y == null) {
        println("The position input is invalid.")
        exitProcess(1)
    }

    val isXSizeOk = { c: Int ->
        c in 0..diffX
    }
    val isYSizeOk = { c: Int ->
        c in 0..diffY
    }

    if (!isXSizeOk(x) || !isYSizeOk(y)) {
        println("The position input is out of range.")
        exitProcess(1)
    }

    return Position(x, y)
}

fun main() {
    val image = getImage()
    val watermarkImage = getImage(true)

    if (!areImageSizesOk(image, watermarkImage)) {
        println("The watermark's dimensions are larger.")
        exitProcess(1)
    }

    var useWaterMarkTransparency = false
    var transparencyColor: Color? = null
    if (hasTransparency(watermarkImage)) {
        useWaterMarkTransparency = checkIfUseWatermarkTransparency()
    } else {
        transparencyColor = askForTransparencyColor()
    }

    var pos: Position? = null
    val percentage = getTransparencyPercentage()
    val positionMethod = getPositionMethod()
    if (positionMethod == PositionMethod.SINGLE) {
        pos = getWatermarkPosition(image, watermarkImage)
    }

    val outputFileName = getOutputFileName()
    val blendImage = putWatermark(image, watermarkImage,
        percentage, useWaterMarkTransparency,
        transparencyColor, pos, positionMethod)

    ImageIO.write(blendImage, outputFileName.takeLast(3), File(outputFileName))
    println("The watermarked image $outputFileName has been created.")
}